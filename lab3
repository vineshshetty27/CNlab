import java.util.Scanner;

public class CRCDemo {
    static String msg;
    static String genPoly = "10001000000100001";
    static String genPoly2 = "1101";

    static char f[] = new char[128]; // Array for message appended with checksum
    static char cs[] = new char[128]; // Temporary array for checksum calculation
    static char g[] = new char[128]; // Array to store generator polynomial

    static int mlen, glen, x, c, flag = 0, test;

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.print("Enter the message to be transferred: ");
        msg = in.next();
        mlen = msg.length(); // Length of the original message
        for (int i = 0; i < mlen; i++) {
            f[i] = msg.charAt(i);
        }
        System.out.println("Predefined Generator Polynomial is: " + genPoly);
        g = genPoly.toCharArray();
        glen = genPoly.length(); // Length of Generator Polynomial
        for (x = mlen; x < (mlen + glen - 1); x++) {
            f[x] = '0';
        }
        System.out.println("Zero extended message is: " + new String(f, 0, mlen + glen - 1));
        crc(); // Checksum computation
        System.out.println("CheckSum is: " + new String(cs, 0, glen - 1));
        /* Subtract the checksum from zero extended message which means we do simple "XORing" */
        for (x = mlen; x < mlen + glen - 1; x++) {
            f[x] = cs[x - mlen];
        }
        System.out.println("Final codeword generated is: " + new String(f, 0, mlen + glen - 1));
        System.out.print("Test Error detection 1(yes) 0(no) ? : ");
        test = in.nextInt();
        if (test == 1) {
            System.out.print("Enter position where error is to be inserted: ");
            x = in.nextInt();
            f[x] = (f[x] == '0') ? '1' : '0';
            System.out.println("Erroneous data: " + new String(f, 0, mlen + glen - 1));
        }
        System.out.println("\nComputation at receiver side");
        crc(); // computation at receiver side
        for (x = 0; x < (glen - 1); x++) {
            if (cs[x] == '1') {
                flag = 1;
                break;
            }
        }
        if (flag == 1) {
            System.out.println("Error was detected during transfer");
        } else {
            System.out.println("No Error Detected during transfer");
        }
    }

    public static void crc() {
        for (x = 0; x < mlen + glen - 1; x++) {
            cs[x] = f[x];
        }
        do {
            if (cs[0] == '1') {
                xor();
            }
            for (c = 0; c < glen - 1; c++) {
                cs[c] = cs[c + 1];
            }
            cs[c] = f[x++];
        } while (x <= mlen + glen - 1);
    }

    public static void xor() {
        for (c = 0; c < glen; c++) {
            cs[c] = ((cs[c] == g[c]) ? '0' : '1');
        }
    }
}
